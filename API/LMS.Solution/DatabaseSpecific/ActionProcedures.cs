//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace LMS.Application.LLBL.DatabaseSpecific
{
	/// <summary>Class which contains the static logic to execute action stored procedures in the database.</summary>
	public static partial class ActionProcedures
	{
		/// <summary>Delegate definition for stored procedure 'SpBookTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpBookTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpCheckPerformBorrowCopyTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpCheckPerformBorrowCopyTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpCustomerMembershipTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpCustomerMembershipTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpCustomerUpgradeToMembershipTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpCustomerUpgradeToMembershipTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpMembershipTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpMembershipTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpUserTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpUserTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);

		/// <summary>Calls stored procedure 'SpBookTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpBookTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpBookTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpBookTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBookTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpBookTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpBookTskResult> SpBookTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpBookTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBookTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpBookTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpBookTskResult> SpBookTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpBookTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpBookTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCheckPerformBorrowCopyTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCheckPerformBorrowCopyTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpCheckPerformBorrowCopyTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpCheckPerformBorrowCopyTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCheckPerformBorrowCopyTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpCheckPerformBorrowCopyTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCheckPerformBorrowCopyTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCheckPerformBorrowCopyTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCheckPerformBorrowCopyTskResult> SpCheckPerformBorrowCopyTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpCheckPerformBorrowCopyTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCheckPerformBorrowCopyTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCheckPerformBorrowCopyTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCheckPerformBorrowCopyTskResult> SpCheckPerformBorrowCopyTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpCheckPerformBorrowCopyTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpCheckPerformBorrowCopyTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerMembershipTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerMembershipTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpCustomerMembershipTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerMembershipTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerMembershipTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpCustomerMembershipTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerMembershipTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCustomerMembershipTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCustomerMembershipTskResult> SpCustomerMembershipTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpCustomerMembershipTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerMembershipTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCustomerMembershipTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCustomerMembershipTskResult> SpCustomerMembershipTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpCustomerMembershipTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpCustomerMembershipTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerUpgradeToMembershipTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerUpgradeToMembershipTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpCustomerUpgradeToMembershipTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerUpgradeToMembershipTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerUpgradeToMembershipTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpCustomerUpgradeToMembershipTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerUpgradeToMembershipTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCustomerUpgradeToMembershipTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCustomerUpgradeToMembershipTskResult> SpCustomerUpgradeToMembershipTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpCustomerUpgradeToMembershipTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerUpgradeToMembershipTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpCustomerUpgradeToMembershipTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpCustomerUpgradeToMembershipTskResult> SpCustomerUpgradeToMembershipTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpCustomerUpgradeToMembershipTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpCustomerUpgradeToMembershipTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpMembershipTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpMembershipTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpMembershipTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpMembershipTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpMembershipTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpMembershipTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpMembershipTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpMembershipTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpMembershipTskResult> SpMembershipTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpMembershipTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpMembershipTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpMembershipTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpMembershipTskResult> SpMembershipTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpMembershipTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpMembershipTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpUserTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpUserTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpUserTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpUserTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpUserTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpUserTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpUserTskResult> SpUserTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpUserTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpUserTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpUserTskResult> SpUserTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpUserTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpUserTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Creates the call object for the call 'SpBookTsk' to stored procedure 'SpBookTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpBookTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Suraj_LMS].[dbo].[SpBookTsk]", "SpBookTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpCheckPerformBorrowCopyTsk' to stored procedure 'SpCheckPerformBorrowCopyTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpCheckPerformBorrowCopyTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Suraj_LMS].[dbo].[SpCheckPerformBorrowCopyTsk]", "SpCheckPerformBorrowCopyTsk")
							.AddParameter("@Json", "VarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpCustomerMembershipTsk' to stored procedure 'SpCustomerMembershipTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpCustomerMembershipTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Suraj_LMS].[dbo].[SpCustomerMembershipTsk]", "SpCustomerMembershipTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpCustomerUpgradeToMembershipTsk' to stored procedure 'SpCustomerUpgradeToMembershipTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpCustomerUpgradeToMembershipTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Suraj_LMS].[dbo].[SpCustomerUpgradeToMembershipTsk]", "SpCustomerUpgradeToMembershipTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpMembershipTsk' to stored procedure 'SpMembershipTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpMembershipTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Suraj_LMS].[dbo].[SpMembershipTsk]", "SpMembershipTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpUserTsk' to stored procedure 'SpUserTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpUserTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Suraj_LMS].[dbo].[SpUserTsk]", "SpUserTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}


		/// <summary>Return value struct for the async method SpBookTskAsync().</summary>
		public struct SpBookTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpCheckPerformBorrowCopyTskAsync().</summary>
		public struct SpCheckPerformBorrowCopyTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpCustomerMembershipTskAsync().</summary>
		public struct SpCustomerMembershipTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpCustomerUpgradeToMembershipTskAsync().</summary>
		public struct SpCustomerUpgradeToMembershipTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpMembershipTskAsync().</summary>
		public struct SpMembershipTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpUserTskAsync().</summary>
		public struct SpUserTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

	}
}
